<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vignesh Sundararajan</title>
    <link>https://vigneshsundararajan.github.io/</link>
    <description>Recent content on Vignesh Sundararajan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://vigneshsundararajan.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ball Tracking and Chasing Robot using ROS and Gazebo</title>
      <link>https://vigneshsundararajan.github.io/blog/autsys/</link>
      <pubDate>Fri, 08 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://vigneshsundararajan.github.io/blog/autsys/</guid>
      <description>This project was my first introduction to Perception and learning about the different image processing techniques that I could apply for Object Detection using the minimal computational resources! I explored methods such as Canny Edge Detection, and Image Masking to extract only the object of interest from the RGB camera feed. Once that is done, I calculated the distance to the object by finding it&amp;rsquo;s centroid and position relative to the robot.</description>
    </item>
    
    <item>
      <title>Monocular Vision based Navigation of a 4-wheeled Robot</title>
      <link>https://vigneshsundararajan.github.io/blog/monovision-nav/</link>
      <pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://vigneshsundararajan.github.io/blog/monovision-nav/</guid>
      <description>The vision system consisted of a monocular camera system (5MP 1080p Raspberry Pi Camera module) interfaced with a Raspberry Pi running ROS Noetic on Ubuntu. The DC motors running the wheels and the servo controlling the orientation of the camera were handled by an L293D driver board which was connected to the GPIO pins of the Raspberry Pi First, the camera was calibrated using the camera_calibration ROS package that uses a checkerboard pattern as a target and performs calibration on either a monocular or stereo system.</description>
    </item>
    
    <item>
      <title>Image Super Resolution using a GAN with a Perceptual Loss Function</title>
      <link>https://vigneshsundararajan.github.io/blog/srgan/</link>
      <pubDate>Thu, 16 Dec 2021 09:12:37 -0500</pubDate>
      
      <guid>https://vigneshsundararajan.github.io/blog/srgan/</guid>
      <description>This was my first ever introduction to Deep Learning and AI in general! I chose to work on this project to get myself acquainted with how SOTA networks can be used on a useful problem statement. I came across Ledig, et al. 2017 and was fascinated by how this could be used in numerous applications, say for potentially upsampling low resolution MRI scans instead of purchasing higher cost equipment. The model network proposed was a version of ResNet with 16 Residual Blocks, utilising skip connections, with high level feature maps being captured by a Perceptual Loss Function trained on the VGG network.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vigneshsundararajan.github.io/about/</link>
      <pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://vigneshsundararajan.github.io/about/</guid>
      <description>Nice to meet you. This is me. &amp;ldquo;Taking on a challenge is a lot like riding a horse. If you&amp;rsquo;re comfortable while you&amp;rsquo;re doing it, you&amp;rsquo;re probably doing it wrong&amp;rdquo;
- Ted Lasso I strive on learning new things everyday. Whether it be obscure productivity tips, geeking out over space exploration, trying out electronic music production, or picking up new languages to gain an appreciation of the world and it&amp;rsquo;s different cultures.</description>
    </item>
    
    <item>
      <title>CNN Autoencoder for Image Denoising</title>
      <link>https://vigneshsundararajan.github.io/blog/cnn/</link>
      <pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://vigneshsundararajan.github.io/blog/cnn/</guid>
      <description>Dataset used MNIST: http://yann.lecun.com/exdb/mnist/
Data augmentation was performed on this dataset by adding a Gaussian noise with $\mu = 0$ and $\sigma = 0.5$. Test-train splits were then created by concatenating the clean images along with their noisy counterparts.
Model Architecture and Training The autoencoder model designed for this task has two convolutional layers along with max pooling in the encoder, and two transpose convolutional layers in the decoder. Training was done for 10 epochs to reduce the loss to a sufficient level.</description>
    </item>
    
    <item>
      <title>KNN Classifier to detect potential credit card fraud</title>
      <link>https://vigneshsundararajan.github.io/blog/knn/</link>
      <pubDate>Fri, 24 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://vigneshsundararajan.github.io/blog/knn/</guid>
      <description>Through this project, I was attempting to understand the K-nearest-neighbors classification algorithm and the process of selecting the optimal estimators.
Understanding the dataset The dataset was a CSV file consisting of PCA values for certain transaction information to protect consumer privacy. The Amount feature is the amount of money in that particular transaction and the Class feature contains two classes safe and fraud
Objective The goal was to find the optimal parameters of the KNN estimator using cross validation and then provide a final estimate of the model&amp;rsquo;s generalization performance via the test set.</description>
    </item>
    
    <item>
      <title>Aerodynamics Team Member - Purdue Electric Racing</title>
      <link>https://vigneshsundararajan.github.io/blog/per/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://vigneshsundararajan.github.io/blog/per/</guid>
      <description>August 2021 - Present
As a member of the Aerodynamics subteam, I have worked on carrying out mesh sensitivity analyses for the multi element rear wing using ANSYS FLUENT, in order to strike a balance between mesh element size and computational resources required to run the simulation. This involved parametrizing the mesh element size and trying out a range of sizes for a constant wind speed. Tracked Lift Force, Drag Force, $C_L$ and $ C_D$ Designed Wind Tunnel correlation CFD simulations for correspondence between simulation data and acquired data.</description>
    </item>
    
    <item>
      <title>Résumé</title>
      <link>https://vigneshsundararajan.github.io/resume/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vigneshsundararajan.github.io/resume/</guid>
      <description>This browser does not support PDFs. Please download the PDF to view it: Download PDF.</description>
    </item>
    
  </channel>
</rss>
